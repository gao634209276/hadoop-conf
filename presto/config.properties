# Presto server的所有配置信息
# 每个Presto server既是一个coordinator也是一个worker。
# 一个coordinator的etc/config.properties应该至少包含以下信息：

#指定是否允许Presto实例作为一个coordinator(接收来自客户端的查询请求，管理每个查询的执行过程)。
coordinator=true
# 是否允许在coordinator服务中进行调度工作。
# 对于大型的集群，在一个节点上的Presto server即作为coordinator又作为worker将会降低查询性能。
# 因为如果一个服务器作为worker使用，大部分的资源都会被worker占用，那么就不会有足够的资源进行关键任务调度、管理和监控查询执行。
node-scheduler.include-coordinator=false
# 指定HTTP server的端口。Presto 使用 HTTP进行内部和外部的所有通讯。
http-server.http.port=8000
# 一个单独的查询任务使用的最大内存 (一个查询计划的某个执行部分会在一个特定的节点上执行)。
# 这个配置参数限制的GROUP BY语句中的Group的数目、JOIN关联中的右关联表的大小、ORDER BY语句中的行数和一个窗口函数中处理的行数。
# 该参数应该根据并发查询的数量和查询的复杂度进行调整。如果该参数设置的太低，很多查询将不能执行；但是如果设置的太高将会导致JVM把内存耗光。
# query.max-memory=50GB
# 一个单独的查询任务使用任何一个节点的最大内存。
# query.max-memory-per-node=1GB
task.max-memory=8GB
# Presto 通过Discovery 服务来找到集群中所有的节点。
# 为了能够找到集群中所有的节点，每一个Presto实例都会在启动的时候将自己注册到discovery服务。
# Presto为了简化部署，并且也不想再增加一个新的服务进程，Presto coordinator 可以运行一个内嵌在coordinator 里面的Discovery 服务。
# 这个内嵌的Discovery 服务和Presto共享HTTP server并且使用同样的端口。
discovery-server.enabled=true
# ：Discovery server的URI。
# 由于启用了Presto coordinator内嵌的Discovery 服务，因此这个uri就是Presto coordinator的uri。
# 修改example.net:8080，根据你的实际环境设置该URI。注意：这个URI一定不能以“/“结尾。
discovery.uri=http://10.20.11.17:8000